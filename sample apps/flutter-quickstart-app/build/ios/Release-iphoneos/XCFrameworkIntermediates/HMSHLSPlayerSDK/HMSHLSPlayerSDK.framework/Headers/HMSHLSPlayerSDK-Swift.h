// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef HMSHLSPLAYERSDK_SWIFT_H
#define HMSHLSPLAYERSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSHLSPlayerSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

@interface AVDateRangeMetadataGroup (SWIFT_EXTENSION(HMSHLSPlayerSDK))
- (NSString * _Nullable)hmsPayloadString SWIFT_WARN_UNUSED_RESULT;
@end




/// HMSHLSCue represents a timed metadata event in a HLS Stream
SWIFT_CLASS("_TtC15HMSHLSPlayerSDK9HMSHLSCue")
@interface HMSHLSCue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSHLSPlaybackState, open) {
  HMSHLSPlaybackStatePlaying = 0,
  HMSHLSPlaybackStateStopped = 1,
  HMSHLSPlaybackStatePaused = 2,
  HMSHLSPlaybackStateBuffering = 3,
  HMSHLSPlaybackStateFailed = 4,
  HMSHLSPlaybackStateUnknown = 5,
};

@protocol HMSHLSPlayerDelegate;
@class NSNumber;
@class AVPlayerViewController;
@class UIView;
@class HMSHLSStatsMonitor;
@class AVPlayer;
@protocol HMSAnalytics;
@class NSURL;

SWIFT_CLASS("_TtC15HMSHLSPlayerSDK12HMSHLSPlayer")
@interface HMSHLSPlayer : NSObject
/// HLS Player delegate
/// You can use this delegate to know about events that happen during live HLS playback
@property (nonatomic, weak) id <HMSHLSPlayerDelegate> _Nullable delegate;
/// This returns the AVPlayerViewController that is being used to play Live HLS Stream
/// \param showsPlayerControls this determines whether the video player UI shows default playback controls
///
- (AVPlayerViewController * _Nonnull)videoPlayerViewControllerWithShowsPlayerControls:(BOOL)showsPlayerControls SWIFT_WARN_UNUSED_RESULT;
/// This returns the overlay view of AVPlayerViewController that is being used to play Live HLS Stream
/// If you want to show any custom view on top of the player, it is recommended to make custom views subview of this overlay view
/// The playerOverlayView resides above the video render layer but below the default player controls layer, so it is ideal to render any custom view on top of the player
@property (nonatomic, readonly, strong) UIView * _Nullable playerOverlayView;
/// Use this to know about various statistics about the current HLS playback
@property (nonatomic, strong) HMSHLSStatsMonitor * _Nonnull statMonitor;
/// The underlying AVPlayer instance
@property (nonatomic, strong) AVPlayer * _Nonnull _nativePlayer;
/// Controls the volume of the HLS player
@property (nonatomic) NSInteger volume;
/// Assign an analytics interface to the HLS player instance so that events related to HLS playback can be sent to analytics dashboard
/// Currently only terminal error events are sent to analytics
/// If you use HMSSDK to join a room, you can assign your HMSSDK instance as analytics interface to the player
/// For example, hlsPlayer.analytics = hmsSDK
@property (nonatomic, weak) id <HMSAnalytics> _Nullable analytics;
/// Last error that happened during HLS playback
@property (nonatomic, readonly) NSError * _Nullable lastError;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Start HLS playback
/// \param url The url of the HLS stream
///
- (void)play:(NSURL * _Nonnull)url;
/// Stop HLS playback
- (void)stop;
/// Pause HLS playback
- (void)pause;
/// Resume HLS Playback
- (void)resume;
/// Seek forward HLS Playback
/// \param seconds Time in seconds to seek forward
///
- (void)seekForwardWithSeconds:(NSTimeInterval)seconds;
/// Seek backward HLS Playback
/// \param seconds Time in seconds to seek backward
///
- (void)seekBackwardWithSeconds:(NSTimeInterval)seconds;
/// Seek HLS Playback to current live position
- (void)seekToLivePosition;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
@end

@class AVPlayerItemMetadataCollector;
@class NSIndexSet;

@interface HMSHLSPlayer (SWIFT_EXTENSION(HMSHLSPlayerSDK)) <AVPlayerItemMetadataCollectorPushDelegate>
- (void)metadataCollector:(AVPlayerItemMetadataCollector * _Nonnull)metadataCollector didCollectDateRangeMetadataGroups:(NSArray<AVDateRangeMetadataGroup *> * _Nonnull)metadataGroups indexesOfNewGroups:(NSIndexSet * _Nonnull)indexesOfNewGroups indexesOfModifiedGroups:(NSIndexSet * _Nonnull)indexesOfModifiedGroups;
@end


SWIFT_PROTOCOL("_TtP15HMSHLSPlayerSDK20HMSHLSPlayerDelegate_")
@protocol HMSHLSPlayerDelegate
@optional
/// Player has switched to different resolution layer of HLS stream - due to improved/degraded network condition or when user manually picks a different resolution
- (void)onResolutionChangedWithVideoSize:(CGSize)videoSize;
/// Player has encountered an error
/// you can cast this error to HMSHLSError and check isTerminal property to know if the error is recoverable or terminal.
/// in case the error is terminal, it’s a good idea to restart the player using play(url: URL) method
- (void)onPlaybackFailureWithError:(NSError * _Nonnull)error;
/// HLS Stream has encountered a timed metadata event at current time. HMSHLSCue has information about the payload contains in the timed event as well as startDate and endDate of the timed event
- (void)onCueWithCue:(HMSHLSCue * _Nonnull)cue;
/// HLS Player playback state has changed
/// You can use this callback to know the player state and show UI according to current player state
- (void)onPlaybackStateChangedWithState:(enum HMSHLSPlaybackState)state;
@end


SWIFT_CLASS("_TtC15HMSHLSPlayerSDK18HMSHLSStatsMonitor")
@interface HMSHLSStatsMonitor : NSObject
/// Last error that happened during HLS playback
@property (nonatomic) NSError * _Nullable lastError;
/// HLS Player delegate
/// You can use this delegate to know about events that happen during live HLS playback
@property (nonatomic, weak) id <HMSHLSPlayerDelegate> _Nullable delegate;
/// Assign an analytics interface to the HLS player instance so that events related to HLS playback can be sent to analytics dashboard
/// Currently only terminal error events are sent to analytics
/// If you use HMSSDK to join a room, you can assign your HMSSDK instance as analytics interface to the player
/// For example, hlsPlayer.analytics = hmsSDK
@property (nonatomic, weak) id <HMSAnalytics> _Nullable analytics;
- (nonnull instancetype)initWithPlayer:(AVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
/// The network bandwidth estimated by the player. This is the bitrate observed by the player in current network conditions
@property (nonatomic, readonly) double estimatedBandwidth;
/// The bitrate of current HLS stream (layer) indicated by the server
@property (nonatomic, readonly) double bitrate;
/// Total number of bytes downloaded till this moment
@property (nonatomic, readonly) int64_t bytesDownloaded;
/// The duration of forward buffer that player has downloaded and ready to play
@property (nonatomic, readonly) NSTimeInterval bufferedDuration;
/// The distance of current playback position from the live edge of HLS stream
@property (nonatomic, readonly) NSTimeInterval distanceFromLiveEdge;
/// The total number of frames dropped till this moment
@property (nonatomic, readonly) NSInteger droppedFrames;
/// The resolution of the HLS stream
@property (nonatomic, readonly) CGSize videoSize;
/// Total duration that the user has watched the stream in milliseconds (includes any rewatch time)
@property (nonatomic, readonly) NSTimeInterval watchDuration;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
