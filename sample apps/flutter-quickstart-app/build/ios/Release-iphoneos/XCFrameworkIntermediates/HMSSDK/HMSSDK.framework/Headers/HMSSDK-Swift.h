// Generated by Apple Swift version 5.5 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
#ifndef HMSSDK_SWIFT_H
#define HMSSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFAudio;
@import CoreGraphics;
@import CoreVideo;
@import Foundation;
@import HMSAnalyticsSDK;
@import ObjectiveC;
@import UIKit;
@import WebRTC;
#endif

#import <HMSSDK/HMSSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="HMSSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif



SWIFT_CLASS("_TtC6HMSSDK12HMSAudioNode")
@interface HMSAudioNode : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNumber;
@class AVAudioPCMBuffer;

SWIFT_CLASS("_TtC6HMSSDK24HMSAudioBufferPlayerNode")
@interface HMSAudioBufferPlayerNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
- (BOOL)playWithBuffer:(AVAudioPCMBuffer * _Nonnull)buffer error:(NSError * _Nullable * _Nullable)error;
- (void)pause;
- (BOOL)resumeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@property (nonatomic, readonly) BOOL isPlaying;
@end


SWIFT_CLASS("_TtC6HMSSDK14HMSAudioSource")
@interface HMSAudioSource : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAudioBuffer;

SWIFT_CLASS("_TtC6HMSSDK20HMSAudioBufferSource")
@interface HMSAudioBufferSource : HMSAudioSource
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)enqueueWithBuffer:(AVAudioBuffer * _Nonnull)buffer;
@end

@class NSURL;

SWIFT_CLASS("_TtC6HMSSDK22HMSAudioFilePlayerNode")
@interface HMSAudioFilePlayerNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
- (BOOL)playWithFileUrl:(NSURL * _Nonnull)fileUrl loops:(BOOL)loops interrupts:(BOOL)interrupts error:(NSError * _Nullable * _Nullable)error completionHandler:(AVAudioNodeCompletionHandler _Nullable)completionHandler;
- (void)pause;
- (BOOL)resumeAndReturnError:(NSError * _Nullable * _Nullable)error;
- (void)stop;
@property (nonatomic, readonly) BOOL isPlaying;
@property (nonatomic, readonly) NSTimeInterval currentTime;
@property (nonatomic, readonly) NSTimeInterval duration;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSAudioMixerSource") SWIFT_AVAILABILITY(ios,introduced=13.0)
@interface HMSAudioMixerSource : HMSAudioSource
- (nullable instancetype)initWithNodes:(NSArray<HMSAudioNode *> * _Nonnull)nodes error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (void)reconnect;
@end



SWIFT_CLASS("_TtC6HMSSDK20HMSAudioOutputDevice")
@interface HMSAudioOutputDevice : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioOutputDevice * _Nonnull speaker;)
+ (HMSAudioOutputDevice * _Nonnull)speaker SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HMSAudioOutputDevice * _Nonnull earpiece;)
+ (HMSAudioOutputDevice * _Nonnull)earpiece SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSString;

SWIFT_CLASS("_TtC6HMSSDK16HMSAudioSettings")
@interface HMSAudioSettings : NSObject
@property (nonatomic, readonly) NSInteger bitRate;
@property (nonatomic, readonly, copy) NSString * _Nonnull codec;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class NSDate;

SWIFT_CLASS("_TtC6HMSSDK24HMSBrowserRecordingState")
@interface HMSBrowserRecordingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class HMSTrack;
@class HMSPeer;

SWIFT_CLASS("_TtC6HMSSDK26HMSChangeTrackStateRequest")
@interface HMSChangeTrackStateRequest : NSObject
@property (nonatomic, readonly, strong) HMSTrack * _Nonnull track;
@property (nonatomic, readonly) BOOL mute;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSCommandPriority, open) {
  HMSCommandPriorityLow = 0,
  HMSCommandPriorityMedium = 1,
  HMSCommandPriorityHigh = 2,
};


SWIFT_CLASS("_TtC6HMSSDK20HMSCommonTrackSource")
@interface HMSCommonTrackSource : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull regular;)
+ (NSString * _Nonnull)regular SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull screen;)
+ (NSString * _Nonnull)screen SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull plugin;)
+ (NSString * _Nonnull)plugin SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// To join a room created, clients need to create a HMSConfig instance and use that instance to call <code>join</code> method of HMSSDK
SWIFT_CLASS("_TtC6HMSSDK9HMSConfig")
@interface HMSConfig : NSObject
/// the name that the user wants to be displayed while in the room
@property (nonatomic, readonly, copy) NSString * _Nonnull userName;
@property (nonatomic, readonly, copy) NSString * _Nonnull userID;
@property (nonatomic, readonly, copy) NSString * _Nonnull roomID;
/// the auth token to be used
@property (nonatomic, readonly, copy) NSString * _Nonnull authToken;
@property (nonatomic, readonly) BOOL shouldSkipPIIEvents;
/// any json string or metadata that can be passed while joining
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
/// to override the default endpoint (advanced)
@property (nonatomic, readonly, copy) NSString * _Nullable endpoint;
/// if enabled, SDK will try to estimate the quality of the network when preview API is called.
@property (nonatomic, readonly) BOOL captureNetworkQualityInPreview;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metadata:(NSString * _Nullable)metadata endpoint:(NSString * _Nullable)endpoint captureNetworkQualityInPreview:(BOOL)captureNetworkQualityInPreview OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUserName:(NSString * _Nonnull)userName userID:(NSString * _Nonnull)userID roomID:(NSString * _Nonnull)roomID authToken:(NSString * _Nonnull)authToken shouldSkipPIIEvents:(BOOL)shouldSkipPIIEvents metadata:(NSString * _Nullable)metadata endpoint:(NSString * _Nullable)endpoint OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use init(userName:authToken:)");
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK9HMSDevice")
@interface HMSDevice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSErrorAction, open) {
  HMSErrorActionNone = 0,
  HMSErrorActionTrack = 1,
  HMSErrorActionInit = 2,
  HMSErrorActionPublish = 3,
  HMSErrorActionJoin = 4,
  HMSErrorActionSubscribe = 5,
  HMSErrorActionDataChannelSend = 6,
  HMSErrorActionToken = 7,
};

@class NSError;

SWIFT_CLASS("_TtC6HMSSDK15HMSErrorFactory")
@interface HMSErrorFactory : NSObject
- (NSError * _Nonnull)websocketConnectionLostWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)httpErrorWithCode:(NSInteger)code action:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)invalidEndpointUrlWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)endpointUnreachableWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)invalidTokenFormatWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)genericTrackWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)cantAccessCaptureDeviceWithAction:(enum HMSErrorAction)action deviceInfo:(NSString * _Nonnull)deviceInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)nothingToReturnWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)codecChangeNotPermittedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)audiovideoSubsystemFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)micCaptureFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)createOfferFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)createAnswerFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)setLocalDescriptionFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)setRemoteDescriptionFailedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)iceFailureWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)iceDisconnectedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)serverErrorsWithCode:(NSInteger)code action:(enum HMSErrorAction)action serverError:(NSString * _Nonnull)serverError params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)alreadyJoinedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)notConnectedWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)unknownWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)unknownSoftWithAction:(enum HMSErrorAction)action errorInfo:(NSString * _Nonnull)errorInfo params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nullable)nsErrorWithError:(NSError * _Nullable)error params:(NSDictionary<NSString *, id> * _Nullable)params isTerminal:(BOOL)isTerminal message:(NSString * _Nullable)message SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)jsonParsingFailedWithAction:(enum HMSErrorAction)action jsonMessage:(NSString * _Nonnull)jsonMessage params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)trackMetadataMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)rtcTrackMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nonnull)peerMetadataMissingWithAction:(enum HMSErrorAction)action params:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;

SWIFT_CLASS("_TtC6HMSSDK21HMSFrameCapturePlugin")
@interface HMSFrameCapturePlugin : HMSVideoPlugin
- (UIImage * _Nullable)capture SWIFT_WARN_UNUSED_RESULT;
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSHLSMeetingURLVariant;
@class HMSHLSRecordingConfig;

SWIFT_CLASS("_TtC6HMSSDK12HMSHLSConfig")
@interface HMSHLSConfig : NSObject
/// Meeting url variants that would be used as sources of HLS streams
@property (nonatomic, readonly, copy) NSArray<HMSHLSMeetingURLVariant *> * _Nullable variants;
/// Recording parameters in case recording is required
@property (nonatomic, readonly, strong) HMSHLSRecordingConfig * _Nullable recording;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithVariants:(NSArray<HMSHLSMeetingURLVariant *> * _Nullable)variants recording:(HMSHLSRecordingConfig * _Nullable)recording OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSHLSMeetingURLVariant")
@interface HMSHLSMeetingURLVariant : NSObject
/// Single click meeting url which we need to start streaming
@property (nonatomic, readonly, copy) NSURL * _Nullable meetingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull metadata;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMeetingURL:(NSURL * _Nullable)meetingURL metadata:(NSString * _Nonnull)metadata OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK21HMSHLSRecordingConfig")
@interface HMSHLSRecordingConfig : NSObject
@property (nonatomic, readonly) BOOL singleFilePerLayer;
@property (nonatomic, readonly) BOOL enableVOD;
- (nonnull instancetype)initWithSingleFilePerLayer:(BOOL)singleFilePerLayer enableVOD:(BOOL)enableVOD OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSHLSRecordingState")
@interface HMSHLSRecordingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) BOOL singleFilePerLayer;
@property (nonatomic, readonly) BOOL enableVOD;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class HMSHLSVariant;

SWIFT_CLASS("_TtC6HMSSDK20HMSHLSStreamingState")
@interface HMSHLSStreamingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSArray<HMSHLSVariant *> * _Nonnull variants;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6HMSSDK19HMSHLSTimedMetadata")
@interface HMSHLSTimedMetadata : NSObject
- (nonnull instancetype)initWithPayload:(NSString * _Nonnull)payload duration:(NSInteger)duration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK13HMSHLSVariant")
@interface HMSHLSVariant : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nonnull meetingURL;
@property (nonatomic, readonly, copy) NSString * _Nonnull metadata;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class HMSRole;
@class HMSAudioTrack;
@class HMSVideoTrack;
@class HMSNetworkQuality;

/// A peer represents all participants connected to a room. Peers can be “local” or “remote”
SWIFT_CLASS("_TtC6HMSSDK7HMSPeer")
@interface HMSPeer : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull peerID;
@property (nonatomic, readonly, copy) NSString * _Nullable customerUserID;
@property (nonatomic, readonly) BOOL isLocal;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) HMSRole * _Nullable role;
@property (nonatomic, readonly, copy) NSString * _Nullable metadata;
@property (nonatomic, readonly, strong) HMSAudioTrack * _Nullable audioTrack;
@property (nonatomic, readonly, strong) HMSVideoTrack * _Nullable videoTrack;
@property (nonatomic, readonly, copy) NSArray<HMSTrack *> * _Nullable auxiliaryTracks;
@property (nonatomic, readonly, strong) HMSNetworkQuality * _Nullable networkQuality;
@property (nonatomic, readonly, copy) NSDate * _Nonnull joinedAt;
@property (nonatomic, readonly, copy) NSDate * _Nonnull updatedAt;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSLocalAudioTrack;
@class HMSLocalVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK12HMSLocalPeer")
@interface HMSLocalPeer : HMSPeer
- (HMSLocalAudioTrack * _Nullable)localAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSLocalVideoTrack * _Nullable)localVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class RTCVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK19HMSLocalScreenTrack")
@interface HMSLocalScreenTrack : HMSVideoTrack <HMSScreenVideoBufferReceiver>
- (void)didReceiveVideoData:(NSData * _Nonnull)data SWIFT_AVAILABILITY(ios,introduced=16.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (null_unspecified instancetype)initWithRTCTrack:(RTCVideoTrack * _Null_unspecified)track SWIFT_UNAVAILABLE;
@end

@class HMSMessageRecipient;

SWIFT_CLASS("_TtC6HMSSDK10HMSMessage")
@interface HMSMessage : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull messageID;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
@property (nonatomic, strong) HMSPeer * _Nullable sender;
@property (nonatomic, strong) HMSMessageRecipient * _Nonnull recipient;
@property (nonatomic, readonly, copy) NSDate * _Nonnull time;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type peerRecipient:(HMSPeer * _Nonnull)peerRecipient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMessage:(NSString * _Nonnull)message type:(NSString * _Nonnull)type rolesRecipient:(NSArray<HMSRole *> * _Nonnull)rolesRecipient OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum HMSMessageRecipientType : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK19HMSMessageRecipient")
@interface HMSMessageRecipient : NSObject
@property (nonatomic, readonly) enum HMSMessageRecipientType type;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable peerRecipient;
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nullable rolesRecipient;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, HMSMessageRecipientType, open) {
  HMSMessageRecipientTypeBroadcast = 0,
  HMSMessageRecipientTypePeer = 1,
  HMSMessageRecipientTypeRoles = 2,
};


SWIFT_CLASS("_TtC6HMSSDK10HMSMicNode")
@interface HMSMicNode : HMSAudioNode
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) float volume;
@end


SWIFT_CLASS("_TtC6HMSSDK17HMSNetworkQuality")
@interface HMSNetworkQuality : NSObject
@property (nonatomic, readonly) NSInteger downlinkQuality;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




typedef SWIFT_ENUM(NSInteger, HMSPeerUpdate, open) {
  HMSPeerUpdatePeerJoined = 0,
  HMSPeerUpdatePeerLeft = 1,
  HMSPeerUpdateRoleUpdated = 2,
  HMSPeerUpdateNameUpdated = 3,
  HMSPeerUpdateMetadataUpdated = 4,
  HMSPeerUpdateNetworkQualityUpdated = 5,
  HMSPeerUpdateDefaultUpdate = 6,
};


SWIFT_CLASS("_TtC6HMSSDK14HMSPermissions")
@interface HMSPermissions : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class HMSPluginSupportResult;

SWIFT_PROTOCOL("_TtP6HMSSDK9HMSPlugin_")
@protocol HMSPlugin
- (HMSPluginSupportResult * _Nonnull)checkSupport SWIFT_WARN_UNUSED_RESULT;
- (HMSPluginSupportResult * _Nonnull)activate SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
@end

enum HMSPluginSupportResultType : NSInteger;
enum HMSPluginUnsupportedErrorTypes : NSInteger;

SWIFT_CLASS("_TtC6HMSSDK22HMSPluginSupportResult")
@interface HMSPluginSupportResult : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull supported;)
+ (HMSPluginSupportResult * _Nonnull)supported SWIFT_WARN_UNUSED_RESULT;
+ (void)setSupported:(HMSPluginSupportResult * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull deviceNotSupported;)
+ (HMSPluginSupportResult * _Nonnull)deviceNotSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setDeviceNotSupported:(HMSPluginSupportResult * _Nonnull)value;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) HMSPluginSupportResult * _Nonnull operatingSystemNotSupported;)
+ (HMSPluginSupportResult * _Nonnull)operatingSystemNotSupported SWIFT_WARN_UNUSED_RESULT;
+ (void)setOperatingSystemNotSupported:(HMSPluginSupportResult * _Nonnull)value;
- (nonnull instancetype)initWithType:(enum HMSPluginSupportResultType)type errorType:(enum HMSPluginUnsupportedErrorTypes)errorType errorMessage:(NSString * _Nullable)errorMessage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSPluginSupportResultType, open) {
  HMSPluginSupportResultTypeSupported = 0,
  HMSPluginSupportResultTypeUnsupported = 1,
};

typedef SWIFT_ENUM(NSInteger, HMSPluginUnsupportedErrorTypes, open) {
  HMSPluginUnsupportedErrorTypesNone = 0,
  HMSPluginUnsupportedErrorTypesOperatingSystemNotSupported = 1,
  HMSPluginUnsupportedErrorTypesDeviceNotsupported = 2,
};

@class HMSRoom;
enum HMSRoomUpdate : NSInteger;

SWIFT_PROTOCOL("_TtP6HMSSDK18HMSPreviewListener_")
@protocol HMSPreviewListener
/// This will be called when preview checks have been passed successfully and local tracks
/// were created if needed for the role.
/// This is the point where applications can start showing a preview screen
/// \param room the room which is ready to be joined
///
/// \param localTracks the tracks for the local peer
///
- (void)onPreview:(HMSRoom * _Nonnull)room localTracks:(NSArray<HMSTrack *> * _Nonnull)localTracks;
/// This will be called when there is an error during preview checks
/// \param error the error that occured
///
- (void)onError:(NSError * _Nonnull)error;
@optional
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
@end

@class HMSVideoSettings;
@class HMSSimulcastSettings;

SWIFT_CLASS("_TtC6HMSSDK18HMSPublishSettings")
@interface HMSPublishSettings : NSObject
@property (nonatomic, readonly, strong) HMSAudioSettings * _Nonnull audio;
@property (nonatomic, readonly, strong) HMSVideoSettings * _Nonnull video;
@property (nonatomic, readonly, strong) HMSVideoSettings * _Nonnull screen;
@property (nonatomic, readonly, strong) HMSSimulcastSettings * _Nullable simulcast;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable allowed;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A configuration object for recording or RTMP stream
SWIFT_CLASS("_TtC6HMSSDK13HMSRTMPConfig")
@interface HMSRTMPConfig : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK21HMSRTMPStreamingState")
@interface HMSRTMPStreamingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@class HMSRemoteAudioTrack;
@class HMSRemoteVideoTrack;

SWIFT_CLASS("_TtC6HMSSDK13HMSRemotePeer")
@interface HMSRemotePeer : HMSPeer
- (HMSRemoteAudioTrack * _Nullable)remoteAudioTrack SWIFT_WARN_UNUSED_RESULT;
- (HMSRemoteVideoTrack * _Nullable)remoteVideoTrack SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6HMSSDK30HMSRemovedFromRoomNotification")
@interface HMSRemovedFromRoomNotification : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly) BOOL roomEnded;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSSubscribeSettings;

SWIFT_CLASS("_TtC6HMSSDK7HMSRole")
@interface HMSRole : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly, strong) HMSPublishSettings * _Nonnull publishSettings;
@property (nonatomic, readonly, strong) HMSSubscribeSettings * _Nonnull subscribeSettings;
@property (nonatomic, readonly, strong) HMSPermissions * _Nonnull permissions;
@property (nonatomic, readonly) NSInteger priority;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable generalPermissions;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable internalPlugins;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable externalPlugins;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6HMSSDK20HMSRoleChangeRequest")
@interface HMSRoleChangeRequest : NSObject
@property (nonatomic, readonly, strong) HMSRole * _Nonnull suggestedRole;
@property (nonatomic, readonly, strong) HMSPeer * _Nullable requestedBy;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class HMSServerRecordingState;

/// A room represents a real-time audio, video session, the basic building block of the 100ms SDK
SWIFT_CLASS("_TtC6HMSSDK7HMSRoom")
@interface HMSRoom : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@property (nonatomic, readonly, copy) NSString * _Nullable roomID;
@property (nonatomic, readonly, copy) NSString * _Nullable sessionID;
@property (nonatomic, readonly, copy) NSDate * _Nullable sessionStartedAt;
@property (nonatomic, readonly, copy) NSString * _Nullable metaData;
@property (nonatomic, readonly, copy) NSArray<HMSPeer *> * _Nonnull peers;
@property (nonatomic, readonly, strong) HMSBrowserRecordingState * _Nonnull browserRecordingState;
@property (nonatomic, readonly, strong) HMSServerRecordingState * _Nonnull serverRecordingState;
@property (nonatomic, readonly, strong) HMSHLSRecordingState * _Nonnull hlsRecordingState;
@property (nonatomic, readonly, strong) HMSRTMPStreamingState * _Nonnull rtmpStreamingState;
@property (nonatomic, readonly, strong) HMSHLSStreamingState * _Nonnull hlsStreamingState;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, HMSRoomUpdate, open) {
  HMSRoomUpdateRoomTypeChanged = 0,
  HMSRoomUpdateMetaDataUpdated = 1,
  HMSRoomUpdateBrowserRecordingStateUpdated = 2,
  HMSRoomUpdateServerRecordingStateUpdated = 3,
  HMSRoomUpdateRtmpStreamingStateUpdated = 4,
  HMSRoomUpdateHlsStreamingStateUpdated = 5,
  HMSRoomUpdateHlsRecordingStateUpdated = 6,
};

@protocol HMSUpdateListener;
@class HMSTrackSettings;
@protocol HMSLogger;
@class HMSScreenBroadcastAudioNode;

/// The public interface of 100ms SDK. Create an instance of HMSSDK to start using the SDK.
/// <em>Key Concepts</em>
/// <em>Room</em> - A room represents a real-time audio, video session, the basic building block of the 100mslive Video SDK
/// <em>Track</em> - A track represents either the audio or video that makes up a stream
/// <em>Peer</em> - A peer represents all participants connected to a room. Peers can be “local” or “remote”
/// <em>Broadcast</em> - A local peer can send any message/data to all remote peers in the room
/// HMSSDK has other methods which the client app can use to get more info about the Room, Peer and Tracks
SWIFT_CLASS("_TtC6HMSSDK6HMSSDK")
@interface HMSSDK : NSObject
/// this will instantiate an HMSSDK object
/// \param block pass a block with different settings as required
///
///
/// returns:
/// an instance of HMSSDK object
+ (HMSSDK * _Nonnull)buildWithBlock:(void (^ _Nullable)(HMSSDK * _Nonnull))block SWIFT_WARN_UNUSED_RESULT;
/// Begin a preview so that the local peer’s audio and video can be displayed to them before they join the room.
/// \param config The config object instance which contains joining information.
///
/// \param delegate The update listener object which will receive all callbacks.
///
- (void)previewWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSPreviewListener> _Nonnull)delegate;
/// Call this preview API any time after joining in case you need to show a preview for a certain role. i.e before doing/accepting a role change request.
/// \param role The role that would be used for checking which tracks would be required.
///
/// \param completion The completion handler to be invoked when tracks are fetched or in case of an error.
///
- (void)previewWithRole:(HMSRole * _Nonnull)role completion:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<HMSTrack *> * _Nullable, NSError * _Nullable))completion;
/// Call this API in case the tracks obtained via preview(role:) API are no longer needed. There is no need to call this if role change happened. Call this if user has decided not to change role to release camera/mic.
- (void)cancelPreview;
/// Join the room.
/// \param config The config object instance which contains joining information.
///
/// \param delegate The update listener object which will receive all callbacks,
///
- (void)joinWithConfig:(HMSConfig * _Nonnull)config delegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Call the <code>leave</code> method on the HMSSDK instance to leave the current room.
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)leave:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Returns the local peer, which contains the local tracks.
@property (nonatomic, readonly, strong) HMSLocalPeer * _Nullable localPeer;
/// Returns all remote peers in the room.
@property (nonatomic, readonly, copy) NSArray<HMSRemotePeer *> * _Nullable remotePeers;
/// Returns all roles in the room.
@property (nonatomic, readonly, copy) NSArray<HMSRole *> * _Nonnull roles;
/// Returns the room which was joined.
@property (nonatomic, readonly, strong) HMSRoom * _Nullable room;
/// Sends a message to everyone in the room.
/// \param type The type of message
///
/// \param message Content of the message.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendBroadcastMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Sends a message to the specified roles defined. All peers that belong to the specified roles will receive the message.
/// \param type The type of message
///
/// \param message Content of the message.
///
/// \param roles The list of roles to whom this message is directed.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendGroupMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message roles:(NSArray<HMSRole *> * _Nonnull)roles priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Sends a direct message to the specified peer only.
/// \param type The type of message.
///
/// \param message Content of the message.
///
/// \param peer The peer to whom this message is directed.
///
/// \param completion The completion handler to be invoked when message was sent, or when error happened during sending
///
- (void)sendDirectMessageWithType:(NSString * _Nonnull)type message:(NSString * _Nonnull)message peer:(HMSPeer * _Nonnull)peer priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(HMSMessage * _Nullable, NSError * _Nullable))completion;
/// Changes metadata field of the local HMSPeer instance and sends the updated metadata to the other peers in the room.
/// \param metadata New metadata field value.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeWithMetadata:(NSString * _Nonnull)metadata priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Changes name field of the local HMSPeer instance and sends the updated metadata to the other peers in the room.
/// \param name New name field value.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeWithName:(NSString * _Nonnull)name priority:(enum HMSCommandPriority)priority completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Requests a change of role for specified peer.
/// \param peer The peer whose role should be changed.
///
/// \param role The target role.
///
/// \param force False if the peer should be prompted to accept the new role. true if their role should be changed without a prompt.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeRoleFor:(HMSPeer * _Nonnull)peer to:(HMSRole * _Nonnull)role force:(BOOL)force completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Requests a change of role for all peers except for the local peer.
/// \param role The target role.
///
/// \param limitToRoles If specified, only peers currently belonging to roles in the array will be changed to the new role.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeRolesOfAllPeersTo:(HMSRole * _Nonnull)role limitToRoles:(NSArray<HMSRole *> * _Nullable)limitToRoles completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Call to accept the role change request sent to the current peer.
/// Once this method is called, the peer’s role will be changed to the requested one.
/// \param request The request that the SDK had sent to this peer (in HMSUpdateListener.onRoleChangeRequest). 
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)acceptWithChangeRole:(HMSRoleChangeRequest * _Nonnull)request completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// To change the mute status of a remote HMSTrack.
/// \param remoteTrack The HMSTrack whose mute status needs to be changed.
///
/// \param mute True if the track needs to be muted, false otherwise.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)changeTrackStateFor:(HMSTrack * _Nonnull)remoteTrack mute:(BOOL)mute completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Removes the specified peer from the current room.
/// \param peer The peer to remove
///
/// \param reason The reason for removing can be passed on to the peer.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)removePeer:(HMSPeer * _Nonnull)peer reason:(NSString * _Nonnull)reason completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// End the room and make all participants leave.
/// \param lock Whether rejoining the room should be disabled till the room is unlocked.
///
/// \param reason The reason for ending the room can be passed on to other peers.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)endRoomWithLock:(BOOL)lock reason:(NSString * _Nonnull)reason completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Start RTMP stream and/or room recording.
/// \param config RTMP/Recording parameters
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startRTMPOrRecordingWithConfig:(HMSRTMPConfig * _Nonnull)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop RTMP stream and room recording.
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopRTMPAndRecordingWithCompletion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Start HLS stream
/// \param config HLS streaming parameters
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)startHLSStreamingWithConfig:(HMSHLSConfig * _Nullable)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Stop HLS stream
/// \param config Optional parameter. When specified will stop specific HLS stream variants only.
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)stopHLSStreamingWithConfig:(HMSHLSConfig * _Nullable)config completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Send HLS timed metadata
/// \param metadata An array of HMSHLSTimedMetadata objects
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)sendHLSTimedMetadata:(NSArray<HMSHLSTimedMetadata *> * _Nonnull)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion;
/// Get session metadata
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)getSessionMetadataWithCompletion:(void (^ _Nullable)(NSString * _Nullable, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Please use HMSSessionStore instead");
/// Set session metadata
/// \param metadata Metadata to set for the current session
///
/// \param completion The completion handler to be invoked when the request succeeds or fails with an error.
///
- (void)setSessionMetadata:(NSString * _Nonnull)metadata completion:(void (^ _Nullable)(BOOL, NSError * _Nullable))completion SWIFT_DEPRECATED_MSG("Please use HMSSessionStore instead");
/// Adds another listener of SDK updates
/// \param delegate the update listener object which will receive all callbacks
///
- (void)addWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Removes the listener of SDK updates
/// \param delegate the update listener to remove
///
- (void)removeWithDelegate:(id <HMSUpdateListener> _Nonnull)delegate;
/// Use to override track settings coming from role policy
@property (nonatomic, strong) HMSTrackSettings * _Nonnull trackSettings;
/// Sets the verbosity of analytics events
@property (nonatomic) HMSAnalyticsEventLevel analyticsLevel;
/// Sets the logger instance to use for piping logs
@property (nonatomic, weak) id <HMSLogger> _Nullable logger;
- (void)prepareForExternalAudioPlayback;
- (void)resumeAfterExternalAudioPlayback;
/// Sets the app group
@property (nonatomic, copy) NSString * _Nullable appGroup;
/// Get audio node which receives audio from screen broadcast extension
/// App group needs to be set on hmssdk instance for it to work
- (HMSScreenBroadcastAudioNode * _Nullable)screenBroadcastAudioReceiverNodeAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// When using multiple hms sdk sessions concurrently in single app, call this to set active sdk to share screen from
/// Note: not required to be called when using just single hms sdk session
- (void)activateForScreenSharing;
/// Returns a list of available audio output devices
- (NSArray<HMSAudioOutputDevice *> * _Nonnull)getAudioOutputDeviceList SWIFT_WARN_UNUSED_RESULT;
/// Routes output audio to a particular HMSAudioOutputDevice; You should pass one of the available audio output devices returned when calling getAudioDeviceList API
- (BOOL)switchAudioOutputTo:(HMSAudioOutputDevice * _Nonnull)device error:(NSError * _Nullable * _Nullable)error;
/// Start sharing in-app screen content (use this to capture the content inside your own app only)
- (void)startAppScreenCaptureWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Stop sharing in-app screen content
- (void)stopAppScreenCaptureWithCompletion:(void (^ _Nullable)(NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface HMSSDK (SWIFT_EXTENSION(HMSSDK)) <HMSAnalytics>
- (void)sendEvent:(NSString * _Nonnull)name payload:(NSDictionary<NSString *, id> * _Nonnull)payload level:(HMSAnalyticsEventLevel)level;
@end


@interface HMSSDK (SWIFT_EXTENSION(HMSSDK))
/// Get authentication token using room short code
/// \param roomCode short code of the room
///
/// \param userID user id of the user
///
/// \param completion The completion handler to be invoked when the request succeeds returning a token or fails with an error.
///
- (void)getAuthTokenByRoomCode:(NSString * _Nonnull)roomCode userID:(NSString * _Nullable)userID completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
@end

@class NSCoder;

SWIFT_CLASS("_TtC6HMSSDK26HMSSampleBufferDisplayView")
@interface HMSSampleBufferDisplayView : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL isEnabled;
@property (nonatomic, strong) HMSVideoTrack * _Nullable track;
@property (nonatomic) CGSize preferredSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class RTCVideoFrame;

@interface HMSSampleBufferDisplayView (SWIFT_EXTENSION(HMSSDK)) <RTCVideoRenderer>
- (void)setSize:(CGSize)size;
- (void)renderFrame:(RTCVideoFrame * _Nullable)frame;
@end



SWIFT_CLASS("_TtC6HMSSDK27HMSScreenBroadcastAudioNode")
@interface HMSScreenBroadcastAudioNode : HMSAudioNode <HMSScreenAudioBufferReceiver>
- (void)didReceiveAudioData:(NSData * _Nonnull)data;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSScreenShareConstants")
@interface HMSScreenShareConstants : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenOrientationKey;)
+ (NSString * _Nonnull)kHMSScreenOrientationKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSActiveSDKId;)
+ (NSString * _Nonnull)kHMSActiveSDKId SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSActiveSDKIdForAudio;)
+ (NSString * _Nonnull)kHMSActiveSDKIdForAudio SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenMachPortName;)
+ (NSString * _Nonnull)kHMSScreenMachPortName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSAudioMachPortName;)
+ (NSString * _Nonnull)kHMSAudioMachPortName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSScreenShareFPS;)
+ (NSString * _Nonnull)kHMSScreenShareFPS SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK23HMSServerRecordingState")
@interface HMSServerRecordingState : NSObject
@property (nonatomic, readonly) BOOL running;
@property (nonatomic, readonly, copy) NSDate * _Nullable startedAt;
@property (nonatomic, readonly) NSError * _Nullable error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@protocol NSObject;

/// The HMSSessionStore class provides a centralized storage solution for session-related data.
SWIFT_CLASS("_TtC6HMSSDK15HMSSessionStore")
@interface HMSSessionStore : NSObject
/// Retrieves an object from the session store for a specified key
/// \param key The key that is associated with the object to be retrieved.
///
/// \param completion The block to be executed after the object has been retrieved. The block takes two arguments: the retrieved object (if any), and an optional error object if an error occurs during the retrieval process.
///
- (void)objectForKey:(NSString * _Nonnull)key completion:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completion;
/// Sets an object in the session store for a specified key.
/// \param object The object to be stored in the session store.
///
/// \param key The key that is associated with the object to be stored.
///
/// \param completion The block to be executed after the object has been stored. The block takes two arguments: the latest value for the key, and an optional error object if an error occurs during the storage process.
///
- (void)set:(id _Nonnull)object forKey:(NSString * _Nonnull)key completion:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completion;
/// Adds a change observer for the specified keys in the session store.
/// \param keys An array of keys that are associated with the objects to be observed.
///
/// \param changeObserver The block to be executed when a change to one of the observed objects is detected. The block takes two arguments: the key of the changed object and its new value.
///
/// \param completion The block to be executed when a listener has been successfully installed or in case of failure.
///
- (void)observeChangesForKeys:(NSArray<NSString *> * _Nonnull)keys changeObserver:(void (^ _Nonnull)(NSString * _Nonnull, id _Nullable))changeObserver completion:(void (^ _Nullable)(id <NSObject> _Nullable, NSError * _Nullable))completion;
/// Removes the previously registerd change observer. It will no longer receive updates post this call.
/// \param observer An observer that was returned from the observeChanges API.
///
- (void)removeObserver:(id <NSObject> _Nonnull)observer;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK31HMSSimulcastLayerSettingsPolicy")
@interface HMSSimulcastLayerSettingsPolicy : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull rid;
@end


@class HMSSimulcastSettingsPolicy;

SWIFT_CLASS("_TtC6HMSSDK20HMSSimulcastSettings")
@interface HMSSimulcastSettings : NSObject
@property (nonatomic, readonly, strong) HMSSimulcastSettingsPolicy * _Nullable video;
@property (nonatomic, readonly, strong) HMSSimulcastSettingsPolicy * _Nullable screen;
@end


SWIFT_CLASS("_TtC6HMSSDK26HMSSimulcastSettingsPolicy")
@interface HMSSimulcastSettingsPolicy : NSObject
@property (nonatomic, readonly, copy) NSArray<HMSSimulcastLayerSettingsPolicy *> * _Nullable layers;
@end


SWIFT_CLASS("_TtC6HMSSDK10HMSSpeaker")
@interface HMSSpeaker : NSObject
@property (nonatomic, readonly, strong) HMSPeer * _Nonnull peer;
@property (nonatomic, readonly, strong) HMSTrack * _Nonnull track;
@property (nonatomic, readonly) NSInteger level;
- (nonnull instancetype)initWithPeer:(HMSPeer * _Nonnull)peer track:(HMSTrack * _Nonnull)track level:(NSInteger)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6HMSSDK29HMSSubscribeDegradationPolicy")
@interface HMSSubscribeDegradationPolicy : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK20HMSSubscribeSettings")
@interface HMSSubscribeSettings : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable subscribeToRoles;
@property (nonatomic, readonly) NSInteger maxSubsBitRate;
@property (nonatomic, readonly, strong) HMSSubscribeDegradationPolicy * _Nullable subscribeDegradation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6HMSSDK15HMSTrackFactory")
@interface HMSTrackFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


typedef SWIFT_ENUM(NSInteger, HMSTrackUpdate, open) {
  HMSTrackUpdateTrackAdded = 0,
  HMSTrackUpdateTrackRemoved = 1,
  HMSTrackUpdateTrackMuted = 2,
  HMSTrackUpdateTrackUnmuted = 3,
  HMSTrackUpdateTrackDescriptionChanged = 4,
  HMSTrackUpdateTrackDegraded = 5,
  HMSTrackUpdateTrackRestored = 6,
};

@class HMSLocalAudioStats;
@class HMSLocalVideoStats;
@class HMSRemoteAudioStats;
@class HMSRemoteVideoStats;
@class HMSRTCStatsReport;

/// 100ms SDK provides callbacks to the client app about any change or update happening in the room after a user has joined by implementing HMSUpdateListener.
/// These updates can be used to render the video on screen or to display other info regarding the room.
SWIFT_PROTOCOL("_TtP6HMSSDK17HMSUpdateListener_")
@protocol HMSUpdateListener
/// This will be called on a successful JOIN of the room by the user
/// This is the point where applications can stop showing its loading state
/// \param room the room which was joined
///
- (void)onJoin:(HMSRoom * _Nonnull)room;
/// This is called when there is a change in any property of the Room
/// \param room the room which was joined
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onRoom:(HMSRoom * _Nonnull)room update:(enum HMSRoomUpdate)update;
/// This will be called whenever there is an update on an existing peer
/// or a new peer got added/existing peer is removed.
/// This callback can be used to keep a track of all the peers in the room
/// \param peer the peer who joined/left or was updated
///
/// \param update the triggered update type. Should be used to perform different UI Actions
///
- (void)onPeer:(HMSPeer * _Nonnull)peer update:(enum HMSPeerUpdate)update;
/// This is called when there are updates on an existing track
/// or a new track got added/existing track is removed
/// This callback can be used to render the video on screen whenever a track gets added
/// \param track the track which was added, removed or updated
///
/// \param update the triggered update type
///
/// \param peer the peer for which track was added, removed or updated
///
- (void)onTrack:(HMSTrack * _Nonnull)track update:(enum HMSTrackUpdate)update peer:(HMSPeer * _Nonnull)peer;
/// This will be called when there is an error in the system
/// and SDK has already retried to fix the error
/// \param error the error that occured
///
- (void)onError:(NSError * _Nonnull)error;
/// This is called when there is a new broadcast message from any other peer in the room
/// This can be used to implement chat is the room
/// \param message the received broadcast message
///
- (void)onMessage:(HMSMessage * _Nonnull)message;
@optional
/// This is called when a role change request arrives
/// \param roleChangeRequest the request for role change info
///
- (void)roleChangeRequest:(HMSRoleChangeRequest * _Nonnull)roleChangeRequest;
/// This is called when a change track state request arrives
/// \param changeTrackStateRequest the request for changing track state
///
- (void)changeTrackStateRequest:(HMSChangeTrackStateRequest * _Nonnull)changeTrackStateRequest;
/// This is called when someone removes the local peer for the current room
/// \param notification the notification containing reason for removing and the initiating peer
///
- (void)removedFromRoom:(HMSRemovedFromRoomNotification * _Nonnull)notification;
@required
/// This is called every 1 second with list of active speakers
/// <h2>A HMSSpeaker object contains -</h2>
/// <ul>
///   <li>
///     peer: the peer who is speaking
///   </li>
///   <li>
///     track: the track which is emitting audio
///   </li>
///   <li>
///     level: a number within range 1-100 indicating the audio volume
///   </li>
/// </ul>
/// A peer who is not present in the list indicates that the peer is not speaking
/// This can be used to highlight currently speaking peers in the room
/// \param speakers the list of speakers
///
- (void)onUpdatedSpeakers:(NSArray<HMSSpeaker *> * _Nonnull)speakers;
/// This is called when SDK detects a network issue and is trying to recover
- (void)onReconnecting;
/// This is called when SDK successfully recovered from a network issue
- (void)onReconnected;
@optional
/// This is called when stats have been collected for a local audio track.
/// \param localAudioStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onLocalAudioStats:(HMSLocalAudioStats * _Nonnull)localAudioStats track:(HMSAudioTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a local video track.
/// \param localVideoStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onLocalVideoStats:(NSArray<HMSLocalVideoStats *> * _Nonnull)localVideoStats track:(HMSVideoTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a remote audio track.
/// \param remoteAudioStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onRemoteAudioStats:(HMSRemoteAudioStats * _Nonnull)remoteAudioStats track:(HMSAudioTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for a remote video track.
/// \param remoteVideoStats the stats payload
///
/// \param track the track
///
/// \param peer the peer owning the track
///
- (void)onRemoteVideoStats:(HMSRemoteVideoStats * _Nonnull)remoteVideoStats track:(HMSVideoTrack * _Nonnull)track peer:(HMSPeer * _Nonnull)peer;
/// This is called when stats have been collected for the current session
/// \param rtcStats the stats payload
///
- (void)onRTCStats:(HMSRTCStatsReport * _Nonnull)rtcStats;
/// This is called when HMSSessionStore is ready for use
/// \param store the HMSSessionStore instance for this session
///
- (void)onSessionStoreAvailable:(HMSSessionStore * _Nonnull)store;
@end


SWIFT_CLASS("_TtC6HMSSDK12HMSUtilities")
@interface HMSUtilities : NSObject
+ (NSArray<HMSDevice *> * _Nonnull)getDevices SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSVideoTrack *> * _Nonnull)getAllVideoTracksIn:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<HMSAudioTrack *> * _Nonnull)getAllAudioTracksIn:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSPeer * _Nullable)getPeerFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSTrack * _Nullable)getTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSAudioTrack * _Nullable)getAudioTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
+ (HMSVideoTrack * _Nullable)getVideoTrackFor:(NSString * _Nonnull)id in:(HMSRoom * _Nonnull)room SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6HMSSDK16HMSVideoSettings")
@interface HMSVideoSettings : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull codec;
@property (nonatomic, readonly) NSInteger frameRate;
@property (nonatomic, readonly) NSInteger width;
@property (nonatomic, readonly) NSInteger height;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC6HMSSDK26HMSVirtualBackgroundPlugin") SWIFT_AVAILABILITY(ios,introduced=15.0)
@interface HMSVirtualBackgroundPlugin : HMSVideoPlugin
@property (nonatomic) NSInteger frameRate;
@property (nonatomic, strong) UIImage * _Nullable backgroundImage;
- (nonnull instancetype)initWithBackgroundImage:(UIImage * _Nullable)backgroundImage blurRadius:(NSNumber * _Nullable)blurRadius OBJC_DESIGNATED_INITIALIZER;
- (CVPixelBufferRef _Nonnull)process:(CVPixelBufferRef _Nonnull)frame SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSNotification (SWIFT_EXTENSION(HMSSDK))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSDidAddScreenTrack;)
+ (NSString * _Nonnull)kHMSDidAddScreenTrack SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kHMSDidRemoveScreenTrack;)
+ (NSString * _Nonnull)kHMSDidRemoveScreenTrack SWIFT_WARN_UNUSED_RESULT;
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
